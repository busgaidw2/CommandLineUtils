// <auto-generated />
namespace Microsoft.Extensions.WebEncoders.Sources
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class EncoderResources
    {
        // ==== Manually edited block. Do not let generator hard-code the resource name.
        private static readonly Assembly _assembly = typeof(EncoderResources).GetTypeInfo().Assembly;
        private static readonly ResourceManager _resourceManager
            = new ResourceManager($"{_assembly.GetName().Name}.{nameof(EncoderResources)}", _assembly);
        // ==== End of manually edited block.

        /// <summary>
        /// Invalid {0}, {1} or {2} length.
        /// </summary>
        internal static string WebEncoders_InvalidCountOffsetOrLength
        {
            get { return GetString("WebEncoders_InvalidCountOffsetOrLength"); }
        }

        /// <summary>
        /// Invalid {0}, {1} or {2} length.
        /// </summary>
        internal static string FormatWebEncoders_InvalidCountOffsetOrLength(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("WebEncoders_InvalidCountOffsetOrLength"), p0, p1, p2);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
