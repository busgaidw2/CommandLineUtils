{
  "api/McMaster.Extensions.CommandLineUtils.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.html",
    "title": "Namespace McMaster.Extensions.CommandLineUtils",
    "keywords": "Namespace McMaster.Extensions.CommandLineUtils Classes ArgumentAttribute Represents one or many positional command line arguments. Arguments are parsed based the Order given. Compare to OptionAttribute . ArgumentEscaper A utility for escaping arguments for new processes. CommandArgument Represents one or many positional command line arguments. Arguments are parsed in the order in which Arguments lists them. Compare to CommandOption . CommandAttribute Represents a command line application using attributes to define options and arguments. CommandLineApplication Describes a set of command line arguments, options, and execution behavior. CommandLineApplication can be nested to support subcommands. CommandLineApplicationExtensions Helper methods for CommandLineApplication . CommandOption Represents one or many command line option that is identified by flag proceeded by '-' or '--'. Options are not positional. Compare to CommandArgument . CommandParsingException The exception that is thrown when command line arguments could not be parsed. ConsoleExtensions Helper methods for IConsole . ConsoleReporter A thread-safe reporter that forwards to console output. DebugHelper Helps handle debug command-line arguments. DotNetCliContext APIs related to .NET Core CLI. DotNetExe Utilities for finding the \"dotnet.exe\" file from the currently running .NET Core application. HelpOptionAttribute The option used to determine if help text should be displayed. This should only be used once per command line app. NullConsole An implementation of IConsole that does nothing. NullReporter A reporter that does nothing. OptionAttribute Represents one or many command line option that is identified by flag proceeded by '-' or '--'. Options are not positional. Compare to ArgumentAttribute . OptionAttributeBase Common option properties. PhysicalConsole An implementation of IConsole that wraps . Prompt Utilities for getting input from an interactive console. SubcommandAttribute Represents a subcommand. ValidationExtensions Extension methods for adding validation rules to options and arguments. VersionOptionAttribute The option used to determine if help text should be displayed. This should only be used once per command line app. Interfaces IConsole An abstract console. IReporter Gathers messages with levels. Enums CommandOptionType Defines the kinds of inputs CommandOption accepts. ResponseFileHandling Specifies options for how to handle response files. The parser treats arguments beginning with &apos;@' as a file path to a response file. A response file contains additional arguments that will be treated as if they were passed in on the command line. Response files can have comments that begin with the # symbol. You cannot use the backslash character () to concatenate lines."
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandAttribute.html",
    "title": "Class CommandAttribute",
    "keywords": "Class CommandAttribute Represents a command line application using attributes to define options and arguments. Inheritance System.Object CommandAttribute Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public sealed class CommandAttribute : Attribute Constructors | Improve this Doc View Source CommandAttribute() Initializes a new CommandAttribute . Declaration public CommandAttribute() | Improve this Doc View Source CommandAttribute(String) Initializes a new CommandAttribute . Declaration public CommandAttribute(string name) Parameters Type Name Description System.String name The name of the command. Properties | Improve this Doc View Source AllowArgumentSeparator Allow '--' to be used to stop parsing arguments. AllowArgumentSeparator Declaration public bool AllowArgumentSeparator { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Description A description of the command. Description Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source ExtendedHelpText Additional text that appears at the bottom of generated help text. ExtendedHelpText Declaration public string ExtendedHelpText { get; set; } Property Value Type Description System.String | Improve this Doc View Source FullName The full name of the command line application to show in help text. FullName Declaration public string FullName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name The name of the command line application. When this is a subcommand, it is the name of the word used to invoke the subcommand. Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source ResponseFileHandling Treat arguments beginning as &apos;@' as a response file. ResponseFileHandling Declaration public ResponseFileHandling ResponseFileHandling { get; set; } Property Value Type Description ResponseFileHandling | Improve this Doc View Source ShowInHelpText Determines if this command appears in generated help text. ShowInHelpText Declaration public bool ShowInHelpText { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ThrowOnUnexpectedArgument Throw when unexpected arguments are encountered. ThrowOnUnexpectedArgument Declaration public bool ThrowOnUnexpectedArgument { get; set; } Property Value Type Description System.Boolean"
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandOptionType.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandOptionType.html",
    "title": "Enum CommandOptionType",
    "keywords": "Enum CommandOptionType Defines the kinds of inputs CommandOption accepts. Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public enum CommandOptionType : int Fields Name Description MultipleValue The option can be specified multiple times. NoValue The option can only be specified once, and does not have a value. SingleValue The option can only be specified once."
  },
  "api/McMaster.Extensions.CommandLineUtils.ConsoleReporter.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ConsoleReporter.html",
    "title": "Class ConsoleReporter",
    "keywords": "Class ConsoleReporter A thread-safe reporter that forwards to console output. Inheritance System.Object ConsoleReporter Implements IReporter Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class ConsoleReporter : object, IReporter Constructors | Improve this Doc View Source ConsoleReporter(IConsole) Initializes an instance of ConsoleReporter . Declaration public ConsoleReporter(IConsole console) Parameters Type Name Description IConsole console | Improve this Doc View Source ConsoleReporter(IConsole, Boolean, Boolean) Initializes an instance of ConsoleReporter . Declaration public ConsoleReporter(IConsole console, bool verbose, bool quiet) Parameters Type Name Description IConsole console System.Boolean verbose When false, Verbose does not display output. System.Boolean quiet When true, only Warn and Error display output Properties | Improve this Doc View Source Console The console to write to. Declaration protected IConsole Console { get; } Property Value Type Description IConsole | Improve this Doc View Source IsQuiet Is verbose output and regular output hidden. Declaration public bool IsQuiet { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsVerbose Is verbose output displayed. Declaration public bool IsVerbose { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Error(String) Writes a message in to Error . Declaration public virtual void Error(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Output(String) Writes a message to Out . Declaration public virtual void Output(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Verbose(String) Writes a message in to Out . Declaration public virtual void Verbose(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Warn(String) Writes a message in to Out . Declaration public virtual void Warn(string message) Parameters Type Name Description System.String message | Improve this Doc View Source WriteLine(TextWriter, String, Nullable<ConsoleColor>, Nullable<ConsoleColor>) Write a line with color. Declaration protected virtual void WriteLine(TextWriter writer, string message, ConsoleColor? foregroundColor, ConsoleColor? backgroundColor = null) Parameters Type Name Description TextWriter writer System.String message System.Nullable < ConsoleColor > foregroundColor System.Nullable < ConsoleColor > backgroundColor Implements IReporter"
  },
  "api/McMaster.Extensions.CommandLineUtils.DotNetExe.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.DotNetExe.html",
    "title": "Class DotNetExe",
    "keywords": "Class DotNetExe Utilities for finding the \"dotnet.exe\" file from the currently running .NET Core application. Inheritance System.Object DotNetExe Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class DotNetExe : object Properties | Improve this Doc View Source FullPath The full filepath to the .NET Core CLI executable. Declaration public static string FullPath { get; } Property Value Type Description System.String Methods | Improve this Doc View Source FullPathOrDefault() Finds the full filepath to the .NET Core CLI executable, or returns a string containing the default name of the .NET Core muxer ('dotnet'). Declaration public static string FullPathOrDefault() Returns Type Description System.String The path or a string named 'dotnet'"
  },
  "api/McMaster.Extensions.CommandLineUtils.HelpText.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.HelpText.html",
    "title": "Namespace McMaster.Extensions.CommandLineUtils.HelpText",
    "keywords": "Namespace McMaster.Extensions.CommandLineUtils.HelpText Classes DefaultHelpTextGenerator A default implementation of help text generation. Interfaces IHelpTextGenerator Generates help text for a command line application."
  },
  "api/McMaster.Extensions.CommandLineUtils.NullConsole.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.NullConsole.html",
    "title": "Class NullConsole",
    "keywords": "Class NullConsole An implementation of IConsole that does nothing. Inheritance System.Object NullConsole Implements IConsole Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class NullConsole : object, IConsole Properties | Improve this Doc View Source BackgroundColor Declaration public ConsoleColor BackgroundColor { get; set; } Property Value Type Description ConsoleColor | Improve this Doc View Source Error A writer that does nothing. Declaration public TextWriter Error { get; } Property Value Type Description TextWriter | Improve this Doc View Source ForegroundColor Declaration public ConsoleColor ForegroundColor { get; set; } Property Value Type Description ConsoleColor | Improve this Doc View Source In An empty reader. Declaration public TextReader In { get; } Property Value Type Description TextReader | Improve this Doc View Source IsErrorRedirected Always false . Declaration public bool IsErrorRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInputRedirected Always false . Declaration public bool IsInputRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsOutputRedirected Always false . Declaration public bool IsOutputRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Out A writer that does nothing. Declaration public TextWriter Out { get; } Property Value Type Description TextWriter | Improve this Doc View Source Singleton A shared instance of NullConsole . Declaration public static NullConsole Singleton { get; } Property Value Type Description NullConsole Methods | Improve this Doc View Source ResetColor() Does nothing. Declaration public void ResetColor() Events | Improve this Doc View Source CancelKeyPress This event never fires. Declaration public event ConsoleCancelEventHandler CancelKeyPress Event Type Type Description ConsoleCancelEventHandler Implements IConsole"
  },
  "api/McMaster.Extensions.CommandLineUtils.PhysicalConsole.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.PhysicalConsole.html",
    "title": "Class PhysicalConsole",
    "keywords": "Class PhysicalConsole An implementation of IConsole that wraps . Inheritance System.Object PhysicalConsole Implements IConsole Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class PhysicalConsole : object, IConsole Properties | Improve this Doc View Source BackgroundColor . Declaration public ConsoleColor BackgroundColor { get; set; } Property Value Type Description ConsoleColor | Improve this Doc View Source Error . Declaration public TextWriter Error { get; } Property Value Type Description TextWriter | Improve this Doc View Source ForegroundColor . Declaration public ConsoleColor ForegroundColor { get; set; } Property Value Type Description ConsoleColor | Improve this Doc View Source In . Declaration public TextReader In { get; } Property Value Type Description TextReader | Improve this Doc View Source IsErrorRedirected . Declaration public bool IsErrorRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInputRedirected . Declaration public bool IsInputRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsOutputRedirected . Declaration public bool IsOutputRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Out . Declaration public TextWriter Out { get; } Property Value Type Description TextWriter | Improve this Doc View Source Singleton A shared instance of PhysicalConsole . Declaration public static IConsole Singleton { get; } Property Value Type Description IConsole Methods | Improve this Doc View Source ResetColor() . Declaration public void ResetColor() Events | Improve this Doc View Source CancelKeyPress . Declaration public event ConsoleCancelEventHandler CancelKeyPress Event Type Type Description ConsoleCancelEventHandler Implements IConsole"
  },
  "api/McMaster.Extensions.CommandLineUtils.Prompt.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Prompt.html",
    "title": "Class Prompt",
    "keywords": "Class Prompt Utilities for getting input from an interactive console. Inheritance System.Object Prompt Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class Prompt : object Methods | Improve this Doc View Source GetInt(String, Nullable<Int32>, Nullable<ConsoleColor>, Nullable<ConsoleColor>) Gets an integer response from the console after displaying a prompt . Declaration public static int GetInt(string prompt, int ? defaultAnswer = null, ConsoleColor? promptColor = null, ConsoleColor? promptBgColor = null) Parameters Type Name Description System.String prompt The question to display on the command line System.Nullable < System.Int32 > defaultAnswer If the user provides an empty response, which value should be returned System.Nullable < ConsoleColor > promptColor The console color to display System.Nullable < ConsoleColor > promptBgColor The console background color for the prompt Returns Type Description System.Int32 The response as a number | Improve this Doc View Source GetPassword(String, Nullable<ConsoleColor>, Nullable<ConsoleColor>) Gets a response that contains a password. Input is masked with an asterisk. Declaration public static string GetPassword(string prompt, ConsoleColor? promptColor = null, ConsoleColor? promptBgColor = null) Parameters Type Name Description System.String prompt The question to display on command line System.Nullable < ConsoleColor > promptColor The console color to use for the prompt System.Nullable < ConsoleColor > promptBgColor The console background color for the prompt Returns Type Description System.String The password as plaintext. Can be null or empty. | Improve this Doc View Source GetPasswordAsSecureString(String, Nullable<ConsoleColor>, Nullable<ConsoleColor>) Gets a response as a SecureString object. Input is masked with an asterisk. Declaration public static System.Security.SecureString GetPasswordAsSecureString(string prompt, ConsoleColor? promptColor = null, ConsoleColor? promptBgColor = null) Parameters Type Name Description System.String prompt The question to display on the command line System.Nullable < ConsoleColor > promptColor The console color to use for the prompt System.Nullable < ConsoleColor > promptBgColor The console background color for the prompt Returns Type Description System.Security.SecureString A finalized SecureString object, may be empty. | Improve this Doc View Source GetString(String, String, Nullable<ConsoleColor>, Nullable<ConsoleColor>) Gets a console response from the console after displaying a prompt . Declaration public static string GetString(string prompt, string defaultValue = null, ConsoleColor? promptColor = null, ConsoleColor? promptBgColor = null) Parameters Type Name Description System.String prompt The question to display on command line System.String defaultValue If the user enters a blank response, return this value instead. System.Nullable < ConsoleColor > promptColor The console color to use for the prompt System.Nullable < ConsoleColor > promptBgColor The console background color for the prompt Returns Type Description System.String The response the user gave. Can be null or empty | Improve this Doc View Source GetYesNo(String, Boolean, Nullable<ConsoleColor>, Nullable<ConsoleColor>) Gets a yes/no response from the console after displaying a prompt . The parsing is case insensitive. Valid responses include: yes, no, y, n. Declaration public static bool GetYesNo(string prompt, bool defaultAnswer, ConsoleColor? promptColor = null, ConsoleColor? promptBgColor = null) Parameters Type Name Description System.String prompt The question to display on the command line System.Boolean defaultAnswer If the user provides an empty response, which value should be returned System.Nullable < ConsoleColor > promptColor The console color to display System.Nullable < ConsoleColor > promptBgColor The console background color for the prompt Returns Type Description System.Boolean True is 'yes'"
  },
  "api/McMaster.Extensions.CommandLineUtils.SubcommandAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.SubcommandAttribute.html",
    "title": "Class SubcommandAttribute",
    "keywords": "Class SubcommandAttribute Represents a subcommand. Inheritance System.Object SubcommandAttribute Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public sealed class SubcommandAttribute : Attribute Constructors | Improve this Doc View Source SubcommandAttribute(String, Type) Initializes a new instance of SubcommandAttribute . Declaration public SubcommandAttribute(string name, Type commandType) Parameters Type Name Description System.String name The name of the subcommand Type commandType The type of the subcommand. Properties | Improve this Doc View Source CommandType The type of the subcommand. Declaration public Type CommandType { get; set; } Property Value Type Description Type | Improve this Doc View Source Name The name of the subcommand. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.html",
    "title": "Namespace McMaster.Extensions.CommandLineUtils.Validation",
    "keywords": "Namespace McMaster.Extensions.CommandLineUtils.Validation Interfaces IArgumentValidator Provides validation for a CommandArgument . IOptionValidator Provides validation for a CommandOption ."
  },
  "api/McMaster.Extensions.CommandLineUtils.ValidationExtensions.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ValidationExtensions.html",
    "title": "Class ValidationExtensions",
    "keywords": "Class ValidationExtensions Extension methods for adding validation rules to options and arguments. Inheritance System.Object ValidationExtensions Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class ValidationExtensions : object Methods | Improve this Doc View Source IsRequired(CommandArgument, Boolean, String) Indicates the argument is required. Declaration public static CommandArgument IsRequired(this CommandArgument argument, bool allowEmptyStrings = false, string errorMessage = null) Parameters Type Name Description CommandArgument argument The argument. System.Boolean allowEmptyStrings Indicates whether an empty string is allowed. System.String errorMessage The custom error message to display. See also . Returns Type Description CommandArgument The argument. | Improve this Doc View Source IsRequired(CommandOption, Boolean, String) Indicates the option is required. Declaration public static CommandOption IsRequired(this CommandOption option, bool allowEmptyStrings = false, string errorMessage = null) Parameters Type Name Description CommandOption option The option. System.Boolean allowEmptyStrings Indicates whether an empty string is allowed. System.String errorMessage The custom error message to display. See also . Returns Type Description CommandOption The option."
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandArgument.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandArgument.html",
    "title": "Class CommandArgument",
    "keywords": "Class CommandArgument Represents one or many positional command line arguments. Arguments are parsed in the order in which Arguments lists them. Compare to CommandOption . Inheritance System.Object CommandArgument Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class CommandArgument : object Constructors | Improve this Doc View Source CommandArgument() Initializes a new instance of CommandArgument . Declaration public CommandArgument() Properties | Improve this Doc View Source Description A description of the argument. Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source MultipleValues Allow multiple values. Declaration public bool MultipleValues { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name The name of the argument. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShowInHelpText Determines if the argument appears in the generated help-text. Declaration public bool ShowInHelpText { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Validators A collection of validators that execute before invoking OnExecute(Func<Int32>) . When validation fails, ValidationErrorHandler is invoked. Declaration public ICollection<IArgumentValidator> Validators { get; } Property Value Type Description ICollection < IArgumentValidator > | Improve this Doc View Source Value The first value from Values , if any. Declaration public string Value { get; } Property Value Type Description System.String | Improve this Doc View Source Values All values specified, if any. Declaration public List<string> Values { get; } Property Value Type Description List < System.String > Extension Methods ValidationExtensions.IsRequired(CommandArgument, Boolean, String)"
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandOption.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandOption.html",
    "title": "Class CommandOption",
    "keywords": "Class CommandOption Represents one or many command line option that is identified by flag proceeded by '-' or '--'. Options are not positional. Compare to CommandArgument . Inheritance System.Object CommandOption Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class CommandOption : object Constructors | Improve this Doc View Source CommandOption(String, CommandOptionType) Initializes a new CommandOption . Declaration public CommandOption(string template, CommandOptionType optionType) Parameters Type Name Description System.String template The template string. This is parsed into ShortName and LongName . CommandOptionType optionType The option type. Properties | Improve this Doc View Source Description A description of this option to show in generated help text. Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Inherited Determines if subcommands added to Commands should also have access to this option. Declaration public bool Inherited { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LongName The long command line flag used to identify this option. On command line, this is preceeded by a double dash: '--{LongName}'. Declaration public string LongName { get; set; } Property Value Type Description System.String | Improve this Doc View Source OptionType Defines the type of the option. Declaration public CommandOptionType OptionType { get; } Property Value Type Description CommandOptionType | Improve this Doc View Source ShortName The short command line flag used to identify this option. On command line, this is preceeded by a single '-{ShortName}'. Declaration public string ShortName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShowInHelpText Determines if this option should be shown in generated help text. Declaration public bool ShowInHelpText { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SymbolName Can be used in addition to ShortName to add a single, non-English character. Example \"-?\". Declaration public string SymbolName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Template The argument template. Declaration public string Template { get; set; } Property Value Type Description System.String | Improve this Doc View Source Validators A collection of validators that execute before invoking OnExecute(Func<Int32>) . When validation fails, ValidationErrorHandler is invoked. Declaration public ICollection<IOptionValidator> Validators { get; } Property Value Type Description ICollection < IOptionValidator > | Improve this Doc View Source ValueName The name of value(s) shown in help text when OptionType is not NoValue . Declaration public string ValueName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Values Any values found during parsing, if any. Declaration public List<string> Values { get; } Property Value Type Description List < System.String > Methods | Improve this Doc View Source HasValue() True when Values is not empty. Declaration public bool HasValue() Returns Type Description System.Boolean | Improve this Doc View Source TryParse(String) Attempt to parse the value that follows after the flag. Declaration public bool TryParse(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean | Improve this Doc View Source Value() Returns the first element of Values , if any. Declaration public string Value() Returns Type Description System.String Extension Methods ValidationExtensions.IsRequired(CommandOption, Boolean, String)"
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandParsingException.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandParsingException.html",
    "title": "Class CommandParsingException",
    "keywords": "Class CommandParsingException The exception that is thrown when command line arguments could not be parsed. Inheritance System.Object CommandParsingException Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class CommandParsingException : Exception Constructors | Improve this Doc View Source CommandParsingException(CommandLineApplication, String) Initializes an instance of CommandParsingException . Declaration public CommandParsingException(CommandLineApplication command, string message) Parameters Type Name Description CommandLineApplication command The command. System.String message The message. | Improve this Doc View Source CommandParsingException(CommandLineApplication, String, Exception) Initializes an instance of CommandParsingException . Declaration public CommandParsingException(CommandLineApplication command, string message, Exception innerException) Parameters Type Name Description CommandLineApplication command The command. System.String message The message. Exception innerException The inner exception Properties | Improve this Doc View Source Command The command that is throwing the exception. Declaration public CommandLineApplication Command { get; } Property Value Type Description CommandLineApplication"
  },
  "api/McMaster.Extensions.CommandLineUtils.DebugHelper.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.DebugHelper.html",
    "title": "Class DebugHelper",
    "keywords": "Class DebugHelper Helps handle debug command-line arguments. Inheritance System.Object DebugHelper Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class DebugHelper : object Methods | Improve this Doc View Source HandleDebugSwitch(ref String[]) Pauses the application for the debugger when '--debug' is passed in. Declaration public static void HandleDebugSwitch(ref string[] args) Parameters Type Name Description System.String [] args The command line arguments"
  },
  "api/McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.html",
    "title": "Class DefaultHelpTextGenerator",
    "keywords": "Class DefaultHelpTextGenerator A default implementation of help text generation. Inheritance System.Object DefaultHelpTextGenerator Implements IHelpTextGenerator Namespace : McMaster.Extensions.CommandLineUtils.HelpText Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class DefaultHelpTextGenerator : object, IHelpTextGenerator Properties | Improve this Doc View Source Singleton A singleton instance of DefaultHelpTextGenerator . Declaration public static DefaultHelpTextGenerator Singleton { get; } Property Value Type Description DefaultHelpTextGenerator Methods | Improve this Doc View Source Generate(CommandLineApplication, TextWriter) Declaration public void Generate(CommandLineApplication application, TextWriter output) Parameters Type Name Description CommandLineApplication application TextWriter output Implements IHelpTextGenerator"
  },
  "api/McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator.html",
    "title": "Interface IHelpTextGenerator",
    "keywords": "Interface IHelpTextGenerator Generates help text for a command line application. Namespace : McMaster.Extensions.CommandLineUtils.HelpText Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IHelpTextGenerator Methods | Improve this Doc View Source Generate(CommandLineApplication, TextWriter) Generate help text for the application. Declaration void Generate(CommandLineApplication application, TextWriter output) Parameters Type Name Description CommandLineApplication application TextWriter output"
  },
  "api/McMaster.Extensions.CommandLineUtils.NullReporter.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.NullReporter.html",
    "title": "Class NullReporter",
    "keywords": "Class NullReporter A reporter that does nothing. Inheritance System.Object NullReporter Implements IReporter Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class NullReporter : object, IReporter Properties | Improve this Doc View Source Singleton A shared instance of NullReporter . Declaration public static IReporter Singleton { get; } Property Value Type Description IReporter Methods | Improve this Doc View Source Error(String) Declaration public void Error(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Output(String) Declaration public void Output(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Verbose(String) Declaration public void Verbose(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Warn(String) Declaration public void Warn(string message) Parameters Type Name Description System.String message Implements IReporter"
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.IOptionValidator.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.IOptionValidator.html",
    "title": "Interface IOptionValidator",
    "keywords": "Interface IOptionValidator Provides validation for a CommandOption . Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IOptionValidator Methods | Improve this Doc View Source GetValidationResult(CommandOption, ValidationContext) Validates the values specified for Values . Declaration ValidationResult GetValidationResult(CommandOption option, ValidationContext context) Parameters Type Name Description CommandOption option The option. ValidationContext context The validation context. Returns Type Description ValidationResult The validation result. Returns if the values pass validation."
  },
  "api/McMaster.Extensions.CommandLineUtils.VersionOptionAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.VersionOptionAttribute.html",
    "title": "Class VersionOptionAttribute",
    "keywords": "Class VersionOptionAttribute The option used to determine if help text should be displayed. This should only be used once per command line app. Inheritance System.Object OptionAttributeBase VersionOptionAttribute Inherited Members OptionAttributeBase.Template OptionAttributeBase.ShortName OptionAttributeBase.LongName OptionAttributeBase.SymbolName OptionAttributeBase.ValueName OptionAttributeBase.Description OptionAttributeBase.ShowInHelpText OptionAttributeBase.Inherited Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public sealed class VersionOptionAttribute : OptionAttributeBase Constructors | Improve this Doc View Source VersionOptionAttribute(String) Initializes a new VersionOptionAttribute with the template --version . Declaration public VersionOptionAttribute(string version) Parameters Type Name Description System.String version The version | Improve this Doc View Source VersionOptionAttribute(String, String) Initializes a new VersionOptionAttribute . Declaration public VersionOptionAttribute(string template, string version) Parameters Type Name Description System.String template The string template. Template . System.String version The version Properties | Improve this Doc View Source Version The version information to be shown. ShortVersionGetter . Declaration public string Version { get; set; } Property Value Type Description System.String"
  },
  "api/McMaster.Extensions.CommandLineUtils.ArgumentAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ArgumentAttribute.html",
    "title": "Class ArgumentAttribute",
    "keywords": "Class ArgumentAttribute Represents one or many positional command line arguments. Arguments are parsed based the Order given. Compare to OptionAttribute . Inheritance System.Object ArgumentAttribute Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public sealed class ArgumentAttribute : Attribute Constructors | Improve this Doc View Source ArgumentAttribute(Int32) Initializes a new ArgumentAttribute . Declaration public ArgumentAttribute(int order) Parameters Type Name Description System.Int32 order The order | Improve this Doc View Source ArgumentAttribute(Int32, String) Initializes a new ArgumentAttribute . Declaration public ArgumentAttribute(int order, string name) Parameters Type Name Description System.Int32 order The order System.String name The name | Improve this Doc View Source ArgumentAttribute(Int32, String, String) Initializes a new ArgumentAttribute . Declaration public ArgumentAttribute(int order, string name, string description) Parameters Type Name Description System.Int32 order The order System.String name The name System.String description The description Properties | Improve this Doc View Source Description A description of the argument. Description . Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name The name of the argument. Name . Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Order The order in which the argument is expected, relative to other arguments. Declaration public int Order { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ShowInHelpText Determines if the argument appears in the generated help-text. ShowInHelpText . Declaration public bool ShowInHelpText { get; set; } Property Value Type Description System.Boolean"
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandLineApplication.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandLineApplication.html",
    "title": "Class CommandLineApplication",
    "keywords": "Class CommandLineApplication Describes a set of command line arguments, options, and execution behavior. CommandLineApplication can be nested to support subcommands. Inheritance System.Object CommandLineApplication Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class CommandLineApplication : object Constructors | Improve this Doc View Source CommandLineApplication(IHelpTextGenerator, IConsole, String, Boolean) Initializes a new instance of CommandLineApplication . Declaration public CommandLineApplication(IHelpTextGenerator helpTextGenerator, IConsole console, string workingDirectory, bool throwOnUnexpectedArg) Parameters Type Name Description IHelpTextGenerator helpTextGenerator The help text generator to use. IConsole console The console implementation to use. System.String workingDirectory The current working directory. System.Boolean throwOnUnexpectedArg Initial value for ThrowOnUnexpectedArgument . | Improve this Doc View Source CommandLineApplication(IConsole) Initializes a new instance of CommandLineApplication . Declaration public CommandLineApplication(IConsole console) Parameters Type Name Description IConsole console The console implementation to use. | Improve this Doc View Source CommandLineApplication(IConsole, String, Boolean) Initializes a new instance of CommandLineApplication . Declaration public CommandLineApplication(IConsole console, string workingDirectory, bool throwOnUnexpectedArg) Parameters Type Name Description IConsole console The console implementation to use. System.String workingDirectory The current working directory. System.Boolean throwOnUnexpectedArg Initial value for ThrowOnUnexpectedArgument . | Improve this Doc View Source CommandLineApplication(Boolean) Initializes a new instance of CommandLineApplication . Declaration public CommandLineApplication(bool throwOnUnexpectedArg = true) Parameters Type Name Description System.Boolean throwOnUnexpectedArg Initial value for ThrowOnUnexpectedArgument . Properties | Improve this Doc View Source AllowArgumentSeparator Determines if '--' can be used to separate known arguments and options from additional content passed to RemainingArguments . Declaration public bool AllowArgumentSeparator { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Arguments Required command-line arguments. Declaration public List<CommandArgument> Arguments { get; } Property Value Type Description List < CommandArgument > | Improve this Doc View Source Commands Subcommands. Declaration public List<CommandLineApplication> Commands { get; } Property Value Type Description List < CommandLineApplication > | Improve this Doc View Source Description A description of the command. Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Error The writer used to display generated error messages. Declaration public TextWriter Error { get; set; } Property Value Type Description TextWriter | Improve this Doc View Source ExtendedHelpText Additional text that appears at the bottom of generated help text. Declaration public string ExtendedHelpText { get; set; } Property Value Type Description System.String | Improve this Doc View Source FullName The full name of the command to show in the help text. Declaration public string FullName { get; set; } Property Value Type Description System.String | Improve this Doc View Source HelpTextGenerator The help text generator to use. Declaration public IHelpTextGenerator HelpTextGenerator { get; set; } Property Value Type Description IHelpTextGenerator | Improve this Doc View Source Invoke The action to call when this command is matched and IsShowingInformation is false . Declaration public Func<int> Invoke { get; set; } Property Value Type Description Func < System.Int32 > | Improve this Doc View Source IsShowingInformation True when OptionHelp or OptionVersion was matched. Declaration public bool IsShowingInformation { get; protected set; } Property Value Type Description System.Boolean | Improve this Doc View Source LongVersionGetter The long-form of the version to display in generated help text. Declaration public Func<string> LongVersionGetter { get; set; } Property Value Type Description Func < System.String > | Improve this Doc View Source Name The short name of the command. When this is a subcommand, it is the name of the word used to invoke the subcommand. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source OptionHelp The option used to determine if help text should be displayed. This is set by calling HelpOption(String) . Declaration public CommandOption OptionHelp { get; } Property Value Type Description CommandOption | Improve this Doc View Source Options Available command-line options on this command. Use GetOptions() to get all available options, which may include inherited options. Declaration public List<CommandOption> Options { get; } Property Value Type Description List < CommandOption > | Improve this Doc View Source OptionVersion The options used to determine if the command version should be displayed. This is set by calling VersionOption(String, Func<String>, Func<String>) . Declaration public CommandOption OptionVersion { get; } Property Value Type Description CommandOption | Improve this Doc View Source Out The writer used to display generated help text. Declaration public TextWriter Out { get; set; } Property Value Type Description TextWriter | Improve this Doc View Source Parent Defaults to null. A link to the parent command if this is instance is a subcommand. Declaration public CommandLineApplication Parent { get; set; } Property Value Type Description CommandLineApplication | Improve this Doc View Source RemainingArguments When initialized with ThrowOnUnexpectedArgument to false , this will contain any unrecognized arguments. Declaration public List<string> RemainingArguments { get; } Property Value Type Description List < System.String > | Improve this Doc View Source ResponseFileHandling When enabled, the parser will treat any arguments beginning with &apos;@' as a file path to a response file. A response file contains additional arguments that will be treated as if they were passed in on the command line. Defaults to Disabled . Nested response false are not supported. Declaration public ResponseFileHandling ResponseFileHandling { get; set; } Property Value Type Description ResponseFileHandling | Improve this Doc View Source ShortVersionGetter The short-form of the version to display in generated help text. Declaration public Func<string> ShortVersionGetter { get; set; } Property Value Type Description Func < System.String > | Improve this Doc View Source ShowInHelpText Determines if this command appears in generated help text. Declaration public bool ShowInHelpText { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ThrowOnUnexpectedArgument Indicates whether the parser should throw an exception when it runs into an unexpected argument. If this field is set to false, the parser will stop parsing when it sees an unexpected argument, and all remaining arguments, including the first unexpected argument, will be stored in RemainingArguments property. Declaration public bool ThrowOnUnexpectedArgument { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ValidationErrorHandler The action to call when the command executes, but there was an error validation options or arguments. The action can return a new validation result. Declaration public Func<ValidationResult, int> ValidationErrorHandler { get; set; } Property Value Type Description Func < ValidationResult , System.Int32 > | Improve this Doc View Source WorkingDirectory Defines the working directory of the application. Defaults to . This will be used as the base path for opening response files when ResponseFileHandling is true . Declaration public string WorkingDirectory { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Argument(String, String, Action<CommandArgument>, Boolean) Adds a command line argument. Declaration public CommandArgument Argument(string name, string description, Action<CommandArgument> configuration, bool multipleValues = false) Parameters Type Name Description System.String name System.String description Action < CommandArgument > configuration System.Boolean multipleValues Returns Type Description CommandArgument | Improve this Doc View Source Argument(String, String, Boolean) Adds a command line argument Declaration public CommandArgument Argument(string name, string description, bool multipleValues = false) Parameters Type Name Description System.String name System.String description System.Boolean multipleValues Returns Type Description CommandArgument | Improve this Doc View Source Command(String, Action<CommandLineApplication>, Boolean) Adds a subcommand. Declaration public CommandLineApplication Command(string name, Action<CommandLineApplication> configuration, bool throwOnUnexpectedArg = true) Parameters Type Name Description System.String name The word used to invoke the subcommand. Action < CommandLineApplication > configuration System.Boolean throwOnUnexpectedArg Returns Type Description CommandLineApplication | Improve this Doc View Source Execute(String[]) Parses an array of strings, matching them against Options , Arguments , and Commands . If this command is matched, it will invoke Invoke . Declaration public int Execute(params string[] args) Parameters Type Name Description System.String [] args Returns Type Description System.Int32 The return code from Invoke . | Improve this Doc View Source Execute<TApp>(IConsole, String[]) Creates an instance of TApp , matching args to all attributes on the type, and then invoking a method named \"Execute\" if it exists. See OptionAttribute , ArgumentAttribute , HelpOptionAttribute , and VersionOptionAttribute . Declaration public static int Execute<TApp>(IConsole console, params string[] args)where TApp : class, new () Parameters Type Name Description IConsole console The console to use System.String [] args The arguments Returns Type Description System.Int32 The process exit code Type Parameters Name Description TApp A type that should be bound to the arguments. Exceptions Type Condition CommandParsingException Thrown when arguments cannot be parsed correctly. | Improve this Doc View Source Execute<TApp>(String[]) Creates an instance of TApp , matching args to all attributes on the type, and then invoking a method named \"Execute\" if it exists. See OptionAttribute , ArgumentAttribute , HelpOptionAttribute , and VersionOptionAttribute . Declaration public static int Execute<TApp>(params string[] args)where TApp : class, new () Parameters Type Name Description System.String [] args The arguments Returns Type Description System.Int32 The process exit code Type Parameters Name Description TApp A type that should be bound to the arguments. Exceptions Type Condition CommandParsingException Thrown when arguments cannot be parsed correctly. | Improve this Doc View Source ExecuteAsync<TApp>(IConsole, String[]) Creates an instance of TApp , matching args to all attributes on the type, and then invoking a method named \"Execute\" if it exists. See OptionAttribute , ArgumentAttribute , HelpOptionAttribute , and VersionOptionAttribute . Declaration public static Task<int> ExecuteAsync<TApp>(IConsole console, params string[] args)where TApp : class, new () Parameters Type Name Description IConsole console The console to use System.String [] args The arguments Returns Type Description Task < System.Int32 > The process exit code Type Parameters Name Description TApp A type that should be bound to the arguments. Exceptions Type Condition CommandParsingException Thrown when arguments cannot be parsed correctly. | Improve this Doc View Source ExecuteAsync<TApp>(String[]) Creates an instance of TApp , matching args to all attributes on the type, and then invoking a method named \"Execute\" if it exists. See OptionAttribute , ArgumentAttribute , HelpOptionAttribute , and VersionOptionAttribute . Declaration public static Task<int> ExecuteAsync<TApp>(params string[] args)where TApp : class, new () Parameters Type Name Description System.String [] args The arguments Returns Type Description Task < System.Int32 > The process exit code Type Parameters Name Description TApp A type that should be bound to the arguments. Exceptions Type Condition CommandParsingException Thrown when arguments cannot be parsed correctly. | Improve this Doc View Source GetFullNameAndVersion() Gets FullName and ShortVersionGetter . Declaration public string GetFullNameAndVersion() Returns Type Description System.String | Improve this Doc View Source GetHelpText() Produces help text describing command usage. Declaration public virtual string GetHelpText() Returns Type Description System.String The help text. | Improve this Doc View Source GetHelpText(String) This method has been marked as obsolete and will be removed in a future version. The recommended replacement is GetHelpText() Declaration public virtual string GetHelpText(string commandName = null) Parameters Type Name Description System.String commandName Returns Type Description System.String | Improve this Doc View Source GetOptions() Gets all command line options available to this command, including any inherited options. Declaration public IEnumerable<CommandOption> GetOptions() Returns Type Description IEnumerable < CommandOption > Command line options. | Improve this Doc View Source HelpOption(String) Helper method that adds a help option. Declaration public CommandOption HelpOption(string template) Parameters Type Name Description System.String template Returns Type Description CommandOption | Improve this Doc View Source OnExecute(Func<Int32>) Defines a callback for when this command is invoked. Declaration public void OnExecute(Func<int> invoke) Parameters Type Name Description Func < System.Int32 > invoke | Improve this Doc View Source OnExecute(Func<Task<Int32>>) Defines an asynchronous callback. Declaration public void OnExecute(Func<Task<int>> invoke) Parameters Type Name Description Func < Task < System.Int32 >> invoke | Improve this Doc View Source Option(String, String, CommandOptionType) Adds a command-line option. Declaration public CommandOption Option(string template, string description, CommandOptionType optionType) Parameters Type Name Description System.String template System.String description CommandOptionType optionType Returns Type Description CommandOption | Improve this Doc View Source Option(String, String, CommandOptionType, Action<CommandOption>) Adds a command-line option. Declaration public CommandOption Option(string template, string description, CommandOptionType optionType, Action<CommandOption> configuration) Parameters Type Name Description System.String template System.String description CommandOptionType optionType Action < CommandOption > configuration Returns Type Description CommandOption | Improve this Doc View Source Option(String, String, CommandOptionType, Action<CommandOption>, Boolean) Adds a command line options. Declaration public CommandOption Option(string template, string description, CommandOptionType optionType, Action<CommandOption> configuration, bool inherited) Parameters Type Name Description System.String template System.String description CommandOptionType optionType Action < CommandOption > configuration System.Boolean inherited Returns Type Description CommandOption | Improve this Doc View Source Option(String, String, CommandOptionType, Boolean) Adds a command-line option. Declaration public CommandOption Option(string template, string description, CommandOptionType optionType, bool inherited) Parameters Type Name Description System.String template System.String description CommandOptionType optionType System.Boolean inherited Returns Type Description CommandOption | Improve this Doc View Source ShowHelp() Show full help. Declaration public void ShowHelp() | Improve this Doc View Source ShowHelp(String) This method has been marked as obsolete and will be removed in a future version. The recommended replacement is ShowHelp() . Declaration public void ShowHelp(string commandName = null) Parameters Type Name Description System.String commandName The subcommand for which to show help. Leave null to show for the current command. | Improve this Doc View Source ShowHint() Show short hint that reminds users to use help option. Declaration public void ShowHint() | Improve this Doc View Source ShowRootCommandFullNameAndVersion() Traverses up Parent and displays the result of GetFullNameAndVersion() . Declaration public void ShowRootCommandFullNameAndVersion() | Improve this Doc View Source ShowVersion() Displays version information that includes FullName and LongVersionGetter . Declaration public void ShowVersion() | Improve this Doc View Source VersionOption(String, Func<String>, Func<String>) Helper method that adds a version option. Declaration public CommandOption VersionOption(string template, Func<string> shortFormVersionGetter, Func<string> longFormVersionGetter = null) Parameters Type Name Description System.String template Func < System.String > shortFormVersionGetter Func < System.String > longFormVersionGetter Returns Type Description CommandOption | Improve this Doc View Source VersionOption(String, String, String) Helper method that adds a version option from known versions strings. Declaration public CommandOption VersionOption(string template, string shortFormVersion, string longFormVersion = null) Parameters Type Name Description System.String template System.String shortFormVersion System.String longFormVersion Returns Type Description CommandOption Extension Methods CommandLineApplicationExtensions.HelpOption(CommandLineApplication) CommandLineApplicationExtensions.VerboseOption(CommandLineApplication) CommandLineApplicationExtensions.VerboseOption(CommandLineApplication, String) CommandLineApplicationExtensions.OnExecute(CommandLineApplication, Action) CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Func<ValidationResult, Int32>) CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Action<ValidationResult>) CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(CommandLineApplication, Assembly)"
  },
  "api/McMaster.Extensions.CommandLineUtils.ConsoleExtensions.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ConsoleExtensions.html",
    "title": "Class ConsoleExtensions",
    "keywords": "Class ConsoleExtensions Helper methods for IConsole . Inheritance System.Object ConsoleExtensions Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class ConsoleExtensions : object Methods | Improve this Doc View Source Write(IConsole, String) Writes a string console output. Declaration public static IConsole Write(this IConsole console, string value) Parameters Type Name Description IConsole console The console. System.String value The value. Returns Type Description IConsole the console. | Improve this Doc View Source WriteLine(IConsole, String) Writes a string followed by a line terminator. Declaration public static IConsole WriteLine(this IConsole console, string value) Parameters Type Name Description IConsole console The console. System.String value The value. Returns Type Description IConsole the console."
  },
  "api/McMaster.Extensions.CommandLineUtils.DotNetCliContext.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.DotNetCliContext.html",
    "title": "Class DotNetCliContext",
    "keywords": "Class DotNetCliContext APIs related to .NET Core CLI. Inheritance System.Object DotNetCliContext Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class DotNetCliContext : object Methods | Improve this Doc View Source IsGlobalVerbose() dotnet --verbose subcommand Declaration public static bool IsGlobalVerbose() Returns Type Description System.Boolean"
  },
  "api/McMaster.Extensions.CommandLineUtils.IReporter.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.IReporter.html",
    "title": "Interface IReporter",
    "keywords": "Interface IReporter Gathers messages with levels. Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IReporter Methods | Improve this Doc View Source Error(String) Report an error. Declaration void Error(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Output(String) Report console output. Declaration void Output(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Verbose(String) Report a verbose message. Declaration void Verbose(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Warn(String) Report a warning. Declaration void Warn(string message) Parameters Type Name Description System.String message"
  },
  "api/McMaster.Extensions.CommandLineUtils.OptionAttributeBase.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.OptionAttributeBase.html",
    "title": "Class OptionAttributeBase",
    "keywords": "Class OptionAttributeBase Common option properties. Inheritance System.Object OptionAttributeBase HelpOptionAttribute OptionAttribute VersionOptionAttribute Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public abstract class OptionAttributeBase : Attribute Properties | Improve this Doc View Source Description A description of this option to show in generated help text. Description . Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Inherited Determines if subcommands added to Commands should also have access to this option. Inherited . Declaration public bool Inherited { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LongName The long command line flag used to identify this option. On command line, this is preceeded by a double dash: '--{LongName}'. Declaration public string LongName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShortName The short command line flag used to identify this option. On command line, this is preceeded by a single '-{ShortName}'. Declaration public string ShortName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShowInHelpText Determines if this option should be shown in generated help text. ShowInHelpText . Declaration public bool ShowInHelpText { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SymbolName Can be used in addition to ShortName to add a single, non-English character. Example \"-?\". Declaration public string SymbolName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Template The option template. This is parsed into the short and long name. Declaration public string Template { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueName The name of value(s) shown in help text when OptionType is not NoValue . Declaration public string ValueName { get; set; } Property Value Type Description System.String"
  },
  "api/McMaster.Extensions.CommandLineUtils.ArgumentEscaper.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ArgumentEscaper.html",
    "title": "Class ArgumentEscaper",
    "keywords": "Class ArgumentEscaper A utility for escaping arguments for new processes. Inheritance System.Object ArgumentEscaper Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class ArgumentEscaper : object Methods | Improve this Doc View Source EscapeAndConcatenate(IEnumerable<String>) Undo the processing which took place to create string[] args in Main, so that the next process will receive the same string[] args. Declaration public static string EscapeAndConcatenate(IEnumerable<string> args) Parameters Type Name Description IEnumerable < System.String > args The arguments Returns Type Description System.String A single string of escaped arguments Remarks See https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/"
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.html",
    "title": "Class CommandLineApplicationExtensions",
    "keywords": "Class CommandLineApplicationExtensions Helper methods for CommandLineApplication . Inheritance System.Object CommandLineApplicationExtensions Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class CommandLineApplicationExtensions : object Methods | Improve this Doc View Source HelpOption(CommandLineApplication) Adds the help option with the template -?|-h|--help . Declaration public static CommandOption HelpOption(this CommandLineApplication app) Parameters Type Name Description CommandLineApplication app Returns Type Description CommandOption | Improve this Doc View Source OnExecute(CommandLineApplication, Action) Sets Invoke with a return code of 0 . Declaration public static void OnExecute(this CommandLineApplication app, Action action) Parameters Type Name Description CommandLineApplication app Action action | Improve this Doc View Source OnValidationError(CommandLineApplication, Action<ValidationResult>) Sets an action to invoke, but only when there is a validation error. Declaration public static void OnValidationError(this CommandLineApplication app, Action<ValidationResult> action) Parameters Type Name Description CommandLineApplication app Action < ValidationResult > action | Improve this Doc View Source OnValidationError(CommandLineApplication, Func<ValidationResult, Int32>) Sets an action to invoke, but only when there is a validation error. Declaration public static void OnValidationError(this CommandLineApplication app, Func<ValidationResult, int> action) Parameters Type Name Description CommandLineApplication app Func < ValidationResult , System.Int32 > action | Improve this Doc View Source VerboseOption(CommandLineApplication) Adds the verbose option with the template -v|--verbose . Declaration public static CommandOption VerboseOption(this CommandLineApplication app) Parameters Type Name Description CommandLineApplication app Returns Type Description CommandOption | Improve this Doc View Source VerboseOption(CommandLineApplication, String) Adds the verbose option with the template -v|--verbose . Declaration public static CommandOption VerboseOption(this CommandLineApplication app, string template) Parameters Type Name Description CommandLineApplication app System.String template Returns Type Description CommandOption | Improve this Doc View Source VersionOptionFromAssemblyAttributes(CommandLineApplication, Assembly) Finds on assembly and uses that to set OptionVersion . Uses the Version that is part of the of the specified assembly if no is applied. Declaration public static CommandOption VersionOptionFromAssemblyAttributes(this CommandLineApplication app, Assembly assembly) Parameters Type Name Description CommandLineApplication app Assembly assembly Returns Type Description CommandOption | Improve this Doc View Source VersionOptionFromAssemblyAttributes(CommandLineApplication, String, Assembly) Finds on assembly and uses that to set OptionVersion . Uses the Version that is part of the of the specified assembly if no is applied. Declaration public static CommandOption VersionOptionFromAssemblyAttributes(CommandLineApplication app, string template, Assembly assembly) Parameters Type Name Description CommandLineApplication app System.String template Assembly assembly Returns Type Description CommandOption"
  },
  "api/McMaster.Extensions.CommandLineUtils.HelpOptionAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.HelpOptionAttribute.html",
    "title": "Class HelpOptionAttribute",
    "keywords": "Class HelpOptionAttribute The option used to determine if help text should be displayed. This should only be used once per command line app. Inheritance System.Object OptionAttributeBase HelpOptionAttribute Inherited Members OptionAttributeBase.Template OptionAttributeBase.ShortName OptionAttributeBase.LongName OptionAttributeBase.SymbolName OptionAttributeBase.ValueName OptionAttributeBase.Description OptionAttributeBase.ShowInHelpText OptionAttributeBase.Inherited Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public sealed class HelpOptionAttribute : OptionAttributeBase Constructors | Improve this Doc View Source HelpOptionAttribute() Initializes a new HelpOptionAttribute with the template -?|-h|--help . Declaration public HelpOptionAttribute() | Improve this Doc View Source HelpOptionAttribute(String) Initializes a new HelpOptionAttribute . Declaration public HelpOptionAttribute(string template) Parameters Type Name Description System.String template The string template. Template ."
  },
  "api/McMaster.Extensions.CommandLineUtils.IConsole.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.IConsole.html",
    "title": "Interface IConsole",
    "keywords": "Interface IConsole An abstract console. Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IConsole Properties | Improve this Doc View Source BackgroundColor The background color of output. Declaration ConsoleColor BackgroundColor { get; set; } Property Value Type Description ConsoleColor | Improve this Doc View Source Error stderr Declaration TextWriter Error { get; } Property Value Type Description TextWriter | Improve this Doc View Source ForegroundColor The foreground color of output. Declaration ConsoleColor ForegroundColor { get; set; } Property Value Type Description ConsoleColor | Improve this Doc View Source In stdin Declaration TextReader In { get; } Property Value Type Description TextReader | Improve this Doc View Source IsErrorRedirected Is stderr being piped to somewhere? Declaration bool IsErrorRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInputRedirected Is stdin piped from somewhere? Declaration bool IsInputRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsOutputRedirected Is stdout being piped to somewhere? Declaration bool IsOutputRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Out stdout Declaration TextWriter Out { get; } Property Value Type Description TextWriter Methods | Improve this Doc View Source ResetColor() Resets ForegroundColor and BackgroundColor . Declaration void ResetColor() Events | Improve this Doc View Source CancelKeyPress Raised when Ctrl+C is pressed. Declaration event ConsoleCancelEventHandler CancelKeyPress Event Type Type Description ConsoleCancelEventHandler Extension Methods ConsoleExtensions.WriteLine(IConsole, String) ConsoleExtensions.Write(IConsole, String)"
  },
  "api/McMaster.Extensions.CommandLineUtils.OptionAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.OptionAttribute.html",
    "title": "Class OptionAttribute",
    "keywords": "Class OptionAttribute Represents one or many command line option that is identified by flag proceeded by '-' or '--'. Options are not positional. Compare to ArgumentAttribute . Inheritance System.Object OptionAttributeBase OptionAttribute Inherited Members OptionAttributeBase.Template OptionAttributeBase.ShortName OptionAttributeBase.LongName OptionAttributeBase.SymbolName OptionAttributeBase.ValueName OptionAttributeBase.Description OptionAttributeBase.ShowInHelpText OptionAttributeBase.Inherited Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public sealed class OptionAttribute : OptionAttributeBase Constructors | Improve this Doc View Source OptionAttribute() Initializes a new OptionAttribute . Declaration public OptionAttribute() | Improve this Doc View Source OptionAttribute(CommandOptionType) Initializes a new OptionAttribute . Declaration public OptionAttribute(CommandOptionType optionType) Parameters Type Name Description CommandOptionType optionType The optionType | Improve this Doc View Source OptionAttribute(String) Initializes a new OptionAttribute . Declaration public OptionAttribute(string template) Parameters Type Name Description System.String template The string template. Template . | Improve this Doc View Source OptionAttribute(String, CommandOptionType) Initializes a new OptionAttribute . Declaration public OptionAttribute(string template, CommandOptionType optionType) Parameters Type Name Description System.String template The template CommandOptionType optionType The option type | Improve this Doc View Source OptionAttribute(String, String, CommandOptionType) Initializes a new OptionAttribute . Declaration public OptionAttribute(string template, string description, CommandOptionType optionType) Parameters Type Name Description System.String template The template System.String description The option description CommandOptionType optionType The option type Properties | Improve this Doc View Source OptionType Defines the type of the option. When not set, this will be inferred from the CLR type of the property. OptionType Declaration public CommandOptionType? OptionType { get; set; } Property Value Type Description System.Nullable < CommandOptionType >"
  },
  "api/McMaster.Extensions.CommandLineUtils.ResponseFileHandling.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ResponseFileHandling.html",
    "title": "Enum ResponseFileHandling",
    "keywords": "Enum ResponseFileHandling Specifies options for how to handle response files. The parser treats arguments beginning with &apos;@' as a file path to a response file. A response file contains additional arguments that will be treated as if they were passed in on the command line. Response files can have comments that begin with the # symbol. You cannot use the backslash character () to concatenate lines. Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public enum ResponseFileHandling : int Fields Name Description Disabled Do not parse response files or treat arguments with &apos;@' as a response file ParseArgsAsLineSeparated Each line in the file is treated as an argument, regardless of whitespace on the line. Lines beginning with # are skipped. ParseArgsAsSpaceSeparated Multiple arguments may appear on one line. Arguments are separate by spaces. Double and single quotes can be used to wrap arguments containing spaces."
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidator.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidator.html",
    "title": "Interface IArgumentValidator",
    "keywords": "Interface IArgumentValidator Provides validation for a CommandArgument . Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IArgumentValidator Methods | Improve this Doc View Source GetValidationResult(CommandArgument, ValidationContext) Validates the values specified for Values . Declaration ValidationResult GetValidationResult(CommandArgument argument, ValidationContext context) Parameters Type Name Description CommandArgument argument The argument. ValidationContext context The validation context. Returns Type Description ValidationResult The validation result. Returns if the values pass validation."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Reference",
    "keywords": "API Reference McMaster.Extensions.CommandLineUtils supports three target frameworks. .NET Standard 2.0 .NET Standard 1.6 .NET Framework 4.5 The API is almost identical between all of the frameworks. The main entry point for most command line applications is CommandLineApplication . For apps built using attributes, these are the most common attributes used: OptionAttribute ArgumentAttribute CommandAttribute SubcommandAttribute HelpOptionAttribute Other commonly used types include DotNetExe Prompt ArgumentEscaper IConsole"
  },
  "index.html": {
    "href": "index.html",
    "title": "CommandLineUtils",
    "keywords": "CommandLineUtils https://nuget.org/packages/McMaster.Extensions.CommandLineUtils This project is a fork of Microsoft.Extensions.CommandLineUtils , which is no longer under active development . This fork, on the other hand, will continue release updates and take contributions. API Reference See the API Reference for more details. Install Install the NuGet package into your project. PM> Install-Package McMaster.Extensions.CommandLineUtils $ dotnet add package McMaster.Extensions.CommandLineUtils <ItemGroup> <PackageReference Include=\"McMaster.Extensions.CommandLineUtils\" Version=\"2.0.1\" /> </ItemGroup> Pre-release builds and symbols: https://www.myget.org/gallery/natemcmaster/ Usage See samples for more examples. CommandLineApplication is the main entry point for most console apps parsing. There are two primary ways to use this API, using the builder pattern and attributes. Attribute API using System; using McMaster.Extensions.CommandLineUtils; [HelpOption] public class Program { public static int Main(string[] args) => CommandLineApplication.Execute<Program>(args); [Option(Description = \"The subject\")] public string Subject { get; } private void OnExecute() { var subject = Subject ?? \"world\"; Console.WriteLine($\"Hello {subject}!\"); } } Builder API using System; using McMaster.Extensions.CommandLineUtils; public class Program { public static int Main(string[] args) { var app = new CommandLineApplication(); app.HelpOption(); var optionSubject = app.Option(\"-s|--subject <SUBJECT>\", \"The subject\", CommandOptionType.SingleValue); app.OnExecute(() => { var subject = optionSubject.HasValue() ? optionSubject.Value() : \"world\"; Console.WriteLine($\"Hello {subject}!\"); return 0; }); return app.Execute(args); } }"
  }
}